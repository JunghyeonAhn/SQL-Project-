/* Title:  1. Data cleaning 
   Description : 

    [Cleaning Step]
    1. Preview the data 
    2. Numeric Outlier Value
    3. Missing Values(NULL & Empty Strings)
    4. Date/Time Range and Format Validation
    5. Product Description Noise Filtration
    6. Product Name Standardization and Categorization
        
*/

# 1. Preview the data 
SELECT COUNT(*)
FROM "data" 

#2. Numeric Outlier Value
--Outlier check -NULL = 0 
SELECT *
FROM "data"
WHERE
 UnitPrice IS NULL OR
 StockCode IS NULL OR
 InvoiceDate  IS NULL OR
 InvoiceNo IS NULL OR
 Description IS NULL OR
 Quantity IS NULL OR
 CustomerID IS NULL OR
 Country IS NULL 


--Outlier check in number
SELECT 
	MIN(UnitPrice) AS min_price,
	Median(UnitPrice) AS median_price,
	MAX(UnitPrice) AS max_price,
	MIN(Quantity) AS min_Quantity,
	Median(Quantity) AS median_Quantity,
	MAX(Quantity) AS max_Quantity
FROM "data"

---Outlier check in number(minus)
SELECT *
FROM "data"
WHERE UnitPrice LIKE '%-%' OR Quantity LIKE '%-%' 

# 3. Missing Values(NULL & Empty Strings)
--Outlier empty cell check 
SELECT *
FROM "data"
WHERE
 Description like '' OR 
 UnitPrice like '' OR 
 StockCode like '' OR
 InvoiceDate  like '' OR
 InvoiceNo like '' OR
 Quantity like '' OR
 CustomerID like '' OR
 Country like '' 

---checking empty cells count 
SELECT 
	SUM(
		CASE 
			WHEN Description ='' OR UnitPrice ='' OR Country='' OR Country ='' OR 
				 InvoiceDate ='' OR InvoiceNo ='' OR Quantity='' OR StockCode ='' OR
				 CustomerID =''
				 THEN 1 
				 ELSE 0
		END
    ) AS total_empty_rows_cnt,
    SUM( 
    	CASE
    		WHEN InvoiceNo ='' THEN 1 ELSE 0 
    	END
     ) AS invoice_empty_cnt,
    SUM( 
    	CASE 
    		WHEN  CustomerID ='' THEN 1 ELSE 0 
    	END
     ) AS customerid_empty_cnt,
    SUM( 
    	CASE 
    		WHEN  Description ='' THEN 1 ELSE 0 
    	END
     ) AS Description_empty_cnt,
    SUM( 
    	CASE 
    		WHEN  Quantity ='' THEN 1 ELSE 0 
    	END
     ) AS Quantity_empty_cnt,
    SUM( 
    	CASE 
    		WHEN  UnitPrice ='' THEN 1 ELSE 0 
    	END
     ) AS UnitPrice_empty_cnt,
    SUM( 
    	CASE 
    		WHEN  Country ='' THEN 1 ELSE 0 
    	END
     ) AS Country_empty_cnt,
    SUM( 
    	CASE 
    		WHEN  InvoiceDate ='' THEN 1 ELSE 0 
    	END
     ) AS  InvoiceDate_empty_cnt
FROM "data";

# 4. Date/Time Range and Format Validation
-- Outlier in date
SELECT 
	MAX(InvoiceDate),
	MEDIAN(InvoiceDate),
	MIN(InvoiceDate)
FROM "data" 


#  5. Product Description Noise Filtration
--1 CNT_Description 
SELECT 
	Description,
	count(Description) AS CNT_PRODUCT
FROM "data" 
GROUP BY Description;


--1.2 CNT_GROUP Description
WITH A AS (SELECT 
	Description,
	count(Description)
FROM "data" 
GROUP BY Description
)
SELECT COUNT(*)
FROM A;

--1.4 finding Outlier in Product name 
SELECT * 
FROM data
WHERE 
    UPPER(Description) LIKE '%ERROR%' OR 
    UPPER(Description) LIKE '%SAMPLE%' OR
    UPPER(Description) LIKE '%DAMAGED%' OR
    UPPER(Description) LIKE '%ADJUST%' OR
    UPPER(Description) LIKE '%BROKEN%' OR
    UPPER(Description) LIKE '%CAN''T FIND%' OR
    UPPER(Description) LIKE '%CRACKED%' OR
    UPPER(Description) LIKE '%CRUSHED%' OR
    UPPER(Description) LIKE '%INCORRECTLY%' OR
    UPPER(Description) LIKE '%LOST%' OR
    UPPER(Description) LIKE '%MOULDY%' OR
    UPPER(Description) LIKE '%THROWN AWAY%' OR
    UPPER(Description) LIKE '%UNSALEABLE%' OR
    UPPER(Description) LIKE '%SHOWROOM%' OR
    UPPER(Description) LIKE '%SOLD' OR
    UPPER(Description) LIKE '%WRONG%' OR
    UPPER(Description) LIKE '%RUSTY%' OR
    UPPER(Description) LIKE '%RETURN%' OR
    UPPER(Description) LIKE '%MIXED' OR
    UPPER(Description) LIKE '%?%' OR 
    UPPER(Description) LIKE '%damage%' OR 
	UPPER(Description) LIKE 'wet%' OR
	UPPER(Description) LIKE '%Found%' OR 
	UPPER(Description) LIKE '%display%' OR
	UPPER(Description) LIKE '%Dotcom%' OR
	UPPER(Description) LIKE '%sold%'
ORDER BY Description DESC;


--1.5 Delete Outlier in Product name 
DELETE 
FROM data
WHERE 
    UPPER(Description) LIKE '%ERROR%' OR 
    UPPER(Description) LIKE '%SAMPLE%' OR
    UPPER(Description) LIKE '%DAMAGED%' OR
    UPPER(Description) LIKE '%ADJUST%' OR
    UPPER(Description) LIKE '%BROKEN%' OR
    UPPER(Description) LIKE '%CAN''T FIND%' OR
    UPPER(Description) LIKE '%CRACKED%' OR
    UPPER(Description) LIKE '%CRUSHED%' OR
    UPPER(Description) LIKE '%INCORRECTLY%' OR
    UPPER(Description) LIKE '%LOST%' OR
    UPPER(Description) LIKE '%MOULDY%' OR
    UPPER(Description) LIKE '%THROWN AWAY%' OR
    UPPER(Description) LIKE '%UNSALEABLE%' OR
    UPPER(Description) LIKE '%SHOWROOM%' OR
    UPPER(Description) LIKE '%SOLD' OR
    UPPER(Description) LIKE '%WRONG%' OR
    UPPER(Description) LIKE '%RUSTY%' OR
    UPPER(Description) LIKE '%RETURN%' OR
    UPPER(Description) LIKE '%MIXED' OR
    UPPER(Description) LIKE '%?%' OR 
    UPPER(Description) LIKE '%damage%' OR 
	UPPER(Description) LIKE 'wet%' OR
	UPPER(Description) LIKE '%Found%' OR 
	UPPER(Description) LIKE '%display%' OR
	UPPER(Description) LIKE '%Dotcom%' OR
	UPPER(Description) LIKE '%sold%';
	

--1.6 Checking the data after deleting 
SELECT 
	COUNT(*) AS cnt_description
FROM "data"


# 6. Changing Date before analysing
CREATE VIEW NEW_DATA AS 
SELECT 
	DATE(
	 SUBSTR(T1.DatePart, -4) || '-' || --year
    REPLACE(SUBSTR(T1.DatePart, 1, INSTR(T1.DatePart, '/')-1), ' ', '') || '-' || -- Month 
    REPLACE(SUBSTR(T1.DatePart, INSTR(T1.DatePart, '/') + 1, INSTR(SUBSTR(T1.DatePart, INSTR(T1.DatePart, '/') + 1), '/') -1), ' ', '')
   ) AS FinalInvoiceDate,
	Description,
	UnitPrice, 
 	StockCode, 
 	InvoiceDate,  
 	InvoiceNo, 
 	Quantity, 
 	CustomerID, 
 	Country
 FROM 
 	(
 		SELECT *,
 		SUBSTR(InvoiceDate, 1, INSTR(InvoiceDate, ' ') - 1) AS DatePart
        FROM "data"
    ) AS T1;

SELECT *
FROM NEW_DATA 







